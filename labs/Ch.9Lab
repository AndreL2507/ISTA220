#region Using directives

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

#endregion

namespace StructsAndEnums
{
    class Program
    {
        static void doWork()
        {
            Month first = Month.December;
            Console.WriteLine(first);
            first++;

            Console.WriteLine(first);
            Console.WriteLine("--------------------");
            Date defaultDate = new Date();
            Console.WriteLine(defaultDate);
            Date weddingAnniversary = new Date(2015, Month.July, 4);
            Console.WriteLine(weddingAnniversary);

            

            Date weddingAnniversaryCopy = weddingAnniversary;
            Console.WriteLine($"Value of copy is {weddingAnniversaryCopy}");

            weddingAnniversary.AdvanceMonth();
            Console.WriteLine($"New value of weddingAnniversary is {weddingAnniversary}");
            Console.WriteLine($"Value of copy is still {weddingAnniversaryCopy}");

            Date newyearseve = new Date(2018, Month.December, 31);
            Console.WriteLine(newyearseve);

            newyearseve.AdvanceDate();
            Console.WriteLine(newyearseve);
        }

        static void Main()
        {
            try
            {
                doWork();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}

using System;

namespace StructsAndEnums
{
    enum Month
    {
        January, February, March, April,
        May, June, July, August,
        September, October, November, December
    }
}
using System;

namespace StructsAndEnums
{
    struct Date
    {
        private int year;
        private Month month;
        private int day;
        
        public Date(int ccyy, Month mm, int dd)
        {
            this.year = ccyy - 1900;
            this.month = mm;
            this.day = dd - 1;
        }
       
       
        public override string ToString()
        {
            string data = $"{this.month} {this.day + 1} {this.year + 1900}";
            return data;
        }
        
        public void AdvanceMonth()
        {
            this.month++;
            if (this.month == Month.December + 1)
            {
                this.month = Month.January;
                this.year++;
            }
        }
        public void AdvanceDate()
        {
            //Console.WriteLine($"1. {this.day} ");
            this.day++;
            //Console.WriteLine($"2. {this.day} ");
            
            if (this.day  > 30)
            {
                //Console.WriteLine($"3. {this.day} ");
                this.day = 0;
                AdvanceMonth();
                //Console.WriteLine($"4. {this.day} ");

            }
        }
    }

}
